'use strict'var fs = require('fs');var log_path = require('path').resolve(__dirname, 'request_log.txt');var rl = require('./rate-limiter.js');var request = require('request');function getThrottler(api){  if(api.rl) return api.rl;  else {    api.rl = new rl(this.rate);    return api.rl;  }};function objMerge(obj1, obj2){  let result = {};  for(let _obj in obj1) result[_obj] = obj1[_obj];  for(let _obj in obj2) result[_obj] = obj2[_obj];  return result;};let getFn = (function() {  return function(method, api, path, param){    return (function(method, api, path, param){      let run = function(){        return new Promise(function(resolve, reject){          if(api.isReady()){            let requestParams = {'url': api.endpoint + path,                                 'method': method,                                  'qs': objMerge({'access_token': api.token}, param)                   };            request(requestParams)            .on('error', function(err){reject(err)})            .on('response', function(response){              let data = '';              response.on('data', function (chunk) {data += chunk;});              response.on('end', function(){resolve(data);});            });          }          else reject(Error("One (or more) of the following undefined: %endpoint%, %token%, %rate%. Maybe call init(â€¦)?"));        });      }      return function(){        return run();      }    }(method, api, path, param));  }});function processResult(result){  return new Promise(function(resolve, reject){    let dataObj = JSON.parse(result);    if(dataObj) resolve(dataObj);    else reject(dataObj);  });}function log(err){  return new Promise(function(resolve, reject){    var wstream = fs.createWriteStream(log_path);    wstream.write(err);    wstream.end();    reject(err);  });}let ThrottlingApiClient = function(){  this.isReady = function(){    return (this.rate !== undefined || this.rl !== undefined) &&            this.endpoint !== undefined &&            this.token !== undefined  };};ThrottlingApiClient.prototype.init = function(endpoint, token, rate){  if(this.endpoint === undefined && (typeof endpoint === "string" || endpoint instanceof String)) this.endpoint = endpoint;  if(this.token === undefined && (typeof token === "string" || token instanceof String)) this.token = token;  if(rate !== undefined && rate.numberOfCalls !== undefined && rate.duration !== undefined) this.rate = rate;  if(this.isReady) this.rl = new rl(this.rate);}ThrottlingApiClient.prototype.get = function(path){  let self = this;  return getThrottler(self).submit(getFn()('GET', self, path, undefined))         .then(processResult)         .catch(log);};ThrottlingApiClient.prototype.post = function(path, param){  let self = this;  return getThrottler(self).submit(getFn()('POST', self, path, param))         .then(processResult)         .catch(log);}ThrottlingApiClient.prototype.put = function(path, param){  let self = this;  return getThrottler(self).submit(getFn()('POST', self, path, param)) /*Updating with POST: https://developers.facebook.com/docs/graph-api/using-graph-api/v2.2#updating*/         .then(processResult)         .catch(log);};ThrottlingApiClient.prototype.delete = function(path){  let self = this;  return getThrottler(self).submit(getFn()('DELETE', self, path, undefined))         .then(processResult)         .catch(log);};module.exports = new ThrottlingApiClient();