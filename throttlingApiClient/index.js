'use strict'var fs = require('fs');var log_path = require('path').resolve(__dirname, 'request_log.txt');var rl = require('./rate-limiter.js');function getThrottler(api){  if(api.rl) return api.rl;  else {    api.rl = new rl(this.rate);    return api.rl;  }};function processResult(result){  return new Promise(function(resolve, reject){    /*ToDo:*/    resolve(result);  });}function log(err){  return new Promise(function(resolve, reject){    var wstream = fs.createWriteStream(log_path);    wstream.write(err);    wstream.end();    reject(err);  });}let ThrottlingApiClient = function(){  this.isReady = function(){    return (this.rate !== undefined || this.rl !== undefined) &&            this.endpoint !== undefined &&            this.token !== undefined  };};ThrottlingApiClient.prototype.init = function(endpoint, token, rate){  if(this.endpoint === undefined && typeof endpoint === "string" || endpoint instanceof String) this.endpoint = endpoint;  if(this.token === undefined && typeof token === "string" || token instanceof String) this.token = token;  if(rate !== undefined && rate.numberOfCalls !== undefined && rate.duration !== undefined) this.rate = rate;  if(this.isReady) this.rl = new rl(this.rate);}ThrottlingApiClient.prototype.get = function(path){  let self = this;  return getThrottler(self).submit()/*ToDo: ('GET', self, path, undefined)*/         .then(processResult)         .catch(log);};ThrottlingApiClient.prototype.post = function(path, param){  let self = this;  return getThrottler(self).submit()/*ToDo: ('POST', self, path, param)*/         .then(processResult)         .catch(log);}ThrottlingApiClient.prototype.put = function(path, param){  let self = this;  return getThrottler(self).submit()/*ToDo: ('POST', self, path, param) */ /*Updating with POST: https://developers.facebook.com/docs/graph-api/using-graph-api/v2.2#updating*/         .then(processResult)         .catch(log);};ThrottlingApiClient.prototype.delete = function(path){  let self = this;  return getThrottler(self).submit()/*ToDo: ('DELETE', self, path, undefined)*/         .then(processResult)         .catch(log);};module.exports = new ThrottlingApiClient();