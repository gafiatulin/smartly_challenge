'use strict'const  sqlStatQ = "SELECT SUM(impressions), SUM(clicks), SUM(spent) FROM test.ad_statistics WHERE ad_id = :id AND date BETWEEN DATE_FORMAT(:start, '%Y-%m-%d') AND DATE_FORMAT(:end,'%Y-%m-%d');",  sqlActQ = "SELECT action, SUM(count), SUM(value) FROM test.ad_actions WHERE ad_id = :id AND date BETWEEN DATE_FORMAT(:start, '%Y-%m-%d') AND DATE_FORMAT(:end, '%Y-%m-%d') GROUP BY action;";function objMerge(obj1, obj2){  let result = {};  for(let _obj in obj1) result[_obj] = obj1[_obj];  for(let _obj in obj2) result[_obj] = obj2[_obj];  return result;};function fetch(){  return function* (next) {    let self = this;    let i = 0;    function dbFetchStat(x){      return (function(id){        return new Promise(function(resolve, reject){          let resultObj;          let opt = {id : x, start : self.query.start_time, end : self.query.end_time};          self.maria.query(sqlStatQ + ' ' + sqlActQ, opt, true)          .on('result', function(res){            res.on('row',function(row){              if(!resultObj){                let intRow = row.map(function(x){return parseInt(x, 10)});                resultObj  = {                  'impressions' : intRow[0],                  'clicks'      : intRow[1],                  'spent'       : intRow[2],                  'ctr'         : 100*intRow[1]/intRow[0],                  'cpc'         : intRow[2]/intRow[1],                  'cpm'         : intRow[2]/(1000*intRow[0]),                  'actions'     : {}                }              } else resultObj.actions[row[0]] = {'count': row[1], 'value': row[2],'cpa' : 'unknown'};            });          })          .on('end', function(){            let temp = {};            temp[x] = resultObj;            resolve(temp);          });        })      })(x);    }    try {      let jsonPromise = Promise.all(this.query.ad_ids.map(dbFetchStat))      .then(function(values){return values.reduce(function(previousValue, currentValue, index, array){return objMerge(previousValue, currentValue);},{})})      .then(function(result){return JSON.stringify(result, null, 2)});      this.body = yield jsonPromise;      this.type = 'application/json';    }    catch(err){      this.throw(err);    }    yield next;  }}module.exports = fetch;